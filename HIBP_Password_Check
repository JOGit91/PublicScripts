None of this was made by me - all credit goes to @mdjxkln on twitter. Taken from site - https://nthashes.com/

I did make one small edit - I added "| format-table > vuln_pass.csv" to the end of the command to output the data to make it export to csv and be more easily sortable.

What?üîó
NTHashes.com provides a free API that allows for querying of more than 850 million passwords which have been exposed via data breaches. The passwords are in NT-Hash format, which is the algorithm used by Microsoft‚Äôs Active Directory.

API Endpointüîó
https://api.nthashes.com/search/{first-5-characters-of-nthash}
No authentication is required.

How do I use this with AD? How do I extract the hashes?üîó
The Internet is full of guides on different ways to achieve this, here I will provide two methods I have found to be safe, reliable, and simple.

Both methods will use the Windows Server AD DS inbuilt tool ntdsutil to create a ‚Äúdump‚Äù of the Active Directory environment. This dump can be used as a data source to extract password hashes for each account.

The first method of extracting the hashes will be using NtdsAudit. The second method will use the DSInternals PowerShell module to perform the same task.

Both methods are provided below in full, and the output of each is a list of accounts with known bad passwords listed in the database. These are minimalist examples, I would encourage adapting them to your environment and needs.


----------------------------------------------------------------------


Using NtdsAuditüîó
This method may be more suitable on systems with older versions of PowerShell (<5), or if it is not desired to install third party PowerShell modules. By default, it also provides additional account information such as whether the user is a Domain/Enterprise admin and whether the account is disabled.

The NtdsAudit tool comes as a single binary which makes post-audit clean-up simple.

1. Create the Active Directory dump (generates ntds.dit and the SYSTEM registry hive under c:\ad-pw-audit)

ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\ad-pw-audit' q q

2. Download NtdsAudit

cd c:\ad-pw-audit
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-WebRequest https://github.com/Dionach/NtdsAudit/releases/download/v2.0.7/NtdsAudit.exe -OutFile NtdsAudit.exe

3. Extract the hashes

.\NtdsAudit.exe '.\Active Directory\ntds.dit' -s .\registry\SYSTEM -p dump.txt

4. Reformat the exported data

$Temp = Import-Csv .\dump.txt -Delimiter ":" -Header "Username", "UID", "LMHash", "NTHash", "Data"
$Accounts = $Temp | % {$User = $_; $User.Data.Split(",") | % {$Data=$_.Split("="); $User | Add-Member -Name $Data[0] -MemberType NoteProperty -Value $Data[1]}; $User | Select -ExcludeProperty Data}

5. Query the API and compare to known hashes, outputting accounts with known breached passwords

$Accounts | % {$Acct = $_; ($acct.NTHash).Substring(0,5) | % {$Hashes = Invoke-RestMethod https://api.nthashes.com/search/$_; if (($Acct.NTHash).Substring(5) -in ($Hashes.split(":")) ) {Write-Output $Acct | select Username, UID, Disabled, IsAdministrator, IsDomainAdmin, IsEnterpriseAdmin} Start-Sleep -Milliseconds 100}} | format-table > vuln_pass.csv


----------------------------------------------------------------


Using DSInternalsüîó
DSInternals is a PowerShell module that exposes advanced Active Directory features. It is available via the PowerShell Gallery, and may be suitable for systems with PowerShell v5 and newer which provides Install-Module functionality.

1. Create the Active Directory dump (generatates ntds.dit and the SYSTEM registry hive under c:\ad-pw-audit)

ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\ad-pw-audit' q q

2. Install the DSInternals PowerShell module

Install-Module DSInternals -Force

3. Extract the hashes

cd c:\ad-pw-audit
$key = Get-BootKey -SystemHiveFilePath .\registry\SYSTEM
Get-ADDBAccount -All -DBPath '.\Active Directory\ntds.dit' -BootKey $key | Format-Custom -View PWDump | Out-File dump.txt -Force -Encoding ascii

4. Reformat the exported data

$Accounts = Get-Content .\dump.txt | % {$Account = $_.split(":"); if (($Account[0] -notmatch "[$]$|^Guest$") -and ($Account[0] -ne "")){[pscustomobject]@{Username=$Account[0]; UID=$Account[1]; Hash=$Account[3]}}} 

5. Query the API and compare to known hashes, outputting accounts with known breached passwords

$Accounts | % {$Acct = $_; ($Acct.Hash).Substring(0,5) | % {$Hashes = Invoke-RestMethod https://api.nthashes.com/search/$_; if (($Acct.hash).Substring(5) -in ($Hashes.split(":")) ) {Write-Output $Acct | Select Username, UID} Start-Sleep -Milliseconds 100 }}

